---
- include: pkg-debian.yml
  when: ansible_os_family == "Debian"

- include: pkg-redhat.yml
  when: ansible_os_family == "RedHat"

- include: pkg-suse.yml
  when: ansible_os_family == "Suse"

- include: agent5.yml
  when: datadog_agent5

- include: agent6.yml
  when: not datadog_agent5

- debug: 'msg="[DEPRECATION NOTICE] Using `datadog_process_checks` is deprecated, use `process` under `datadog_checks` instead"'
  when: datadog_process_checks is defined

- service: name=datadog-agent state=started enabled=yes
  when: datadog_enabled

- service: name=datadog-agent state=stopped enabled=no
  when: not datadog_enabled

- name: Create a configuration file for each Datadog check
  template:
    src=checks.yaml.j2
    dest=/etc/dd-agent/conf.d/{{ item }}.yaml
    owner={{ datadog_user }}
    group={{ datadog_group }}
  with_items: '{{ datadog_checks.keys() }}'
  notify:
   - restart datadog-agent

- name: Create a check agent for each Datadog check
  copy:
    src={{ item.name }}.py
    dest=/etc/dd-agent/checks.d/{{ item.name }}.py
    owner={{ datadog_user }}
    group={{ datadog_group }}
  with_items: '{{ datadog_check_agents }}'
  notify:
   - restart datadog-agent

- name: Create a check agent for each Datadog check
  copy:
    src: "{{ item }}.py"
    dest: "/etc/dd-agent/checks.d/{{ item }}.py"
    owner: "{{ datadog_user }}"
    group: "{{ datadog_group }}"
  with_items: "{{ datadog_check_agents }}"
  notify:
   - restart datadog-agent

- name: Upgrade snakebite version
  pip:
    name: snakebite
    version: "{{ datadog_snakebite_version }}"
    executable: /opt/datadog-agent/embedded/bin/pip
    state: present
  when: hadoop_server_monitoring is defined and hadoop_server_monitoring
  notify: restart datadog-agent

- name: Install perl-DBD-MySQL
  yum:
    state: present
    name: perl-DBD-MySQL
  when: mysql_server_monitoring is defined and mysql_server_monitoring

- mysql_db: name=datadog state=present
  when: data_server_monitoring is defined and data_server_monitoring

- mysql_user: name=datadog password="{{ datadog_mysql_data_password }}" priv=datadog.*:ALL state=present
  when: data_server_monitoring is defined and data_server_monitoring

- name: Adding datadog system user to "{{ item }}" group
  user:
    name: "{{ datadog_user }}"
    groups: "{{ item }}"
    append: yes
  with_items: "{{ datadog_groups }}"
